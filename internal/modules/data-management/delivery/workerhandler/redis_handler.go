// Code generated by candi v1.18.0.

package workerhandler

import (
	"fmt"

	"zania-api/pkg/shared/usecase"

	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/factory/types"
	"github.com/golangid/candi/codebase/interfaces"
	"github.com/golangid/candi/tracer"
)

type RedisHandler struct {
	uc        usecase.Usecase
	validator interfaces.Validator
}

func NewRedisHandler(uc usecase.Usecase, deps dependency.Dependency) *RedisHandler {
	return &RedisHandler{
		uc:        uc,
		validator: deps.GetValidator(),
	}
}

func (h *RedisHandler) MountHandlers(group *types.WorkerHandlerGroup) {
	group.Add("data-management-sample", h.handleDataManagement)
}

func (h *RedisHandler) handleDataManagement(eventContext *candishared.EventContext) error {
	trace, ctx := tracer.StartTraceWithContext(eventContext.Context(), "DataManagementDeliveryRedis:HandleDataManagement")
	defer trace.Finish()

	fmt.Printf("redis subs: execute handler %s with message %s\n", eventContext.HandlerRoute(), eventContext.Message())

	// exec usecase
	// h.uc.SomethingUsecase()

	return ctx.Err()
}
